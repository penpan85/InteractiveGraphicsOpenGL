/*
 * Torus vertex shader
 * Compute vertex and normal using u-v's in gl_Vertex and gl_Normal
 */

// Send to fragment shader: position and normal (in eye coordinates)
varying vec4 pos;
varying vec3 norm;

// Torus parameters
uniform float outRad, inRad;

// Position at (u,v) on a torus
vec4 torusPosition(float u, float v)
{
    // ... (placeholder)
    return vec4(0, 0, 0, 1);
}

// Normal vector at (u,v) on a torus
vec3 torusNormal(float u, float v)
{
    // ... (placeholder)
    return vec3(0, 0, 1);
}

void main()
{
    // ... (placeholder -- should compute position and normal)
    vec4 my_Vertex = vec4(0,0,0,1);
    vec3 my_Normal = vec3(0,0,1);
    // ...

    // For fragment shader
    pos  = gl_ModelViewMatrix * my_Vertex;
    norm = gl_NormalMatrix    * my_Normal;

    // Use computed vertex position
    gl_Position = gl_ModelViewProjectionMatrix * my_Vertex;
    // Pass color to the fragment shader
    gl_FrontColor = gl_Color;
}
